import os
import numpy as np
import sys
from gensim.models.word2vec import Word2Vec
from gensim.models.word2vec import LineSentence
import argparse
import logging
logger=logging.getLogger()

def SetupLogging():
    '''log to both stdout and file'''
    logger.setLevel(logging.DEBUG)
    format = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    ch = logging.StreamHandler(sys.stdout)
    ch.setFormatter(format)
    logger.addHandler(ch)
    logfile=os.path.splitext(sys.argv[0])[0]+'.pylog'
    fh = logging.FileHandler(logfile)
    fh.setFormatter(format)
    logger.addHandler(fh)

def PrepareTrainingData(inputfile, num_train_records):
    '''extract the tags from inputfile into a tmp file'''
    fin=open(inputfile)
    fout=open(inputfile+'.tmp', 'w')
    for (idx, line) in enumerate(fin):
        if idx>=num_train_records:
            break
        fout.write(line.split('#$$#')[1])
    fout.flush()
    fin.close()
    fout.close()
    return open(inputfile+'.tmp')

def main():
    parser=argparse.ArgumentParser(description='Train word2vec model and  convert image tags into vectors')
    parser.add_argument('--model', help="place to load or store model, i.e., the voc")
    parser.add_argument('--input', help='input tag file generated by preprocess.py;')
    parser.add_argument('--output', help='output file for storing the vectors of tags for each image; if none, then do interactive similarity search;')
    parser.add_argument('--ntrain', type=int, default=150000, help='num of records used for training')
    parser.add_argument('--n', type=int, default=100,help='vector size')
    args=parser.parse_args()
    SetupLogging()
    if (args.output is None) and (args.input is None):
        model=Word2Vec.load(args.model)
        while True:
            try:
                test_word=raw_input('-->')
                if 'quit' in test_word:
                    sys.exit()
                print model.most_similar(test_word.split())
            except EOFError:
                sys.exit()
    elif os.path.exists(args.model):
        logger.info('Converting %s...' % args.input)
        model=Word2Vec.load(args.model)
        fout=open(args.output, 'w')
        with open(args.input) as fd:
            num=0
            for line in fd:
                num+=1
                sep='#$$#'
                if sep not in line:
                    sep=' '
                meta, tags=line.split(sep)
                vec=np.zeros(args.n)
                count=0;
                for tag in tags.split():
                    if tag in model:
                        vec+=model[tag]
                        count+=1;
                if count>0:
                    vec/=count
                fout.write('%s%s%s\n' %(meta, sep, ' '.join(['%f' % x for x in vec])))
            logger.info('Processed %d lines' % num)
        fout.flush()
    else:
        logger.info('Training....')
        fd=PrepareTrainingData(args.input, args.ntrain)
        sentences=LineSentence(fd)
        model=Word2Vec(sentences, size=args.n)
        model.save(args.model)
        logger.info('Finish Training....')

if __name__=="__main__":
    main()
